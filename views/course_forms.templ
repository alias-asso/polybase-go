package views

import (
	"fmt"
	"git.sr.ht/~alias/polybase-go/internal"
	"time"
)

templ Modal() {
	<div id="modal-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
		<div class="bg-base-100 rounded-lg max-w-4xl p-6 sm:p-4 relative">
			<button onclick="closeModal()" class="absolute top-4 right-4 text-base-500 hover:text-base-700">
				<span class="icon-cross size-6"></span>
			</button>
			{ children... }
		</div>
	</div>
	@ModalDynamic()
}

// TODO: this should be renamed and attached to the page
templ ModalDynamic() {
	<script>
    if (!window.modal) {
      window.modal = true;
      function closeModal() {
        document.getElementById('modal-container').innerHTML = '';
      }
      
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeModal();
        }
      });
      
      document.getElementById('modal-overlay').addEventListener('click', function(e) {
        if (e.target === this) closeModal();
      });
    }
    </script>
}

templ FormField(id string, label string, required bool) {
	<div>
		<label class="block text-base-600 mb-2" for={ id }>
			{ label }
			if required {
				<span class="text-red-500">*</span>
			}
		</label>
		<div class="[&>*]:w-full [&>*]:bg-base-100 [&>*]:px-4 [&>*]:py-2 [&>*]:border [&>*]:border-base-300 [&>*]:rounded-lg [&>*:focus]:outline-none [&>*:focus]:border-accent-500">
			{ children... }
		</div>
	</div>
}

templ NewCourseForm() {
	@Modal() {
		<div class="space-y-6">
			<h2 class="text-2xl font-bold">Ajouter un nouveau poly</h2>
			<form id="new-course-form" hx-post="/admin/courses" hx-target="#courses-grid" class="space-y-6">
				<div class="p-4 rounded-lg border border-base-300">
					<h3 class="text-lg font-semibold mb-4">Identifiants du poly</h3>
					<div class="grid grid-cols-3 gap-4">
						@FormField("code", "Code", true) {
							<input type="text" id="code" name="code" required/>
						}
						@FormField("kind", "Type", true) {
							<select id="kind" name="kind" required>
								<option value="TD">TD</option>
								<option value="Cours">Cours</option>
								<option value="Memento">Memento</option>
								<option value="TME">TME</option>
							</select>
						}
						@FormField("part", "Partie", true) {
							<input type="text" id="part" name="part" required/>
						}
					</div>
				</div>
				<div class="grid grid-cols-2 gap-6">
					@FormField("name", "Nom", true) {
						<input type="text" id="name" name="name" required/>
					}
					@FormField("semester", "Semestre", true) {
						<select id="semester" name="semester" required>
							if time.Now().Month() >= time.July {
								<option value="S1">S1</option>
								<option value="S2">S2</option>
							} else {
								<option value="S2">S2</option>
								<option value="S1">S1</option>
							}
						</select>
					}
					@FormField("quantity", "Quantité initiale", true) {
						<input type="number" id="quantity" name="quantity" required/>
					}
					@FormField("total", "Quantité totale", false) {
						<input type="number" id="total" name="total"/>
					}
				</div>
				@ErrorTarget()
				<div class="flex justify-end gap-x-4 pt-4">
					@Button(Medium, Default) {
						<button type="button" onclick="closeModal()">
							Annuler
						</button>
					}
					@Button(Medium, Accent) {
						<button type="submit">
							Ajouter
						</button>
					}
				</div>
			</form>
		</div>
		<script>
    if (!window.newCourseForm) {
      window.newCourseForm = true;
      document.body.addEventListener('htmx:configRequest', function(evt) {
        if (evt.target.id === 'new-course-form') {
          const code = document.getElementById('code').value;
          const kind = document.getElementById('kind').value;
          const part = document.getElementById('part').value;
          evt.detail.path = `/admin/courses/${code}/${kind}/${part}`;
        }
      });

      document.body.addEventListener('htmx:afterOnLoad', function(evt) {
        if (evt.detail.elt.id === 'new-course-form' && 
          evt.detail.xhr.status === 200) {
          closeModal();
        }
      });
    }
    </script>
	}
}

templ EditCourseForm(course internal.Course) {
	@Modal() {
		<div class="space-y-6">
			<h2 class="text-2xl font-bold">Modifier un poly</h2>
			<form id="edit-course-form" hx-put={ fmt.Sprintf("/admin/courses/%s", course.ID()) } hx-target="#courses-grid" class="space-y-6">
				<div class="p-4 rounded-lg border border-base-300">
					<h3 class="text-lg font-semibold mb-4">Identifiants du poly</h3>
					<div class="grid grid-cols-3 gap-4">
						@FormField("code", "Code", true) {
							<input type="text" id="code" name="code" required value={ course.Code }/>
						}
						@FormField("kind", "Type", true) {
							<input type="text" id="kind" name="kind" required value={ course.Kind }/>
						}
						@FormField("part", "Partie", true) {
							<input type="text" id="part" name="part" required value={ fmt.Sprintf("%d", course.Part) }/>
						}
					</div>
				</div>
				<div class="grid grid-cols-2 gap-6">
					@FormField("name", "Nom", true) {
						<input type="text" id="name" name="name" required value={ course.Name }/>
					}
					@FormField("semester", "Semestre", true) {
						<input type="text" id="semester" name="semester" required value={ course.Semester }/>
					}
					@FormField("quantity", "Quantité", true) {
						<input type="number" id="quantity" name="quantity" required value={ fmt.Sprintf("%d", course.Quantity) }/>
					}
					@FormField("total", "Quantité totale", false) {
						<input type="number" id="total" name="total" value={ fmt.Sprintf("%d", course.Total) }/>
					}
				</div>
				@ErrorTarget()
				<div class="flex justify-between pt-4">
					<div class="flex gap-x-4">
						@Button(Medium, Important) {
							<button
								type="button"
								hx-get={ fmt.Sprintf("/admin/courses/delete/%s", course.ID()) }
								hx-target="#modal-container"
							>
								Supprimer
							</button>
						}
					</div>
					<div class="flex gap-x-4">
						@Button(Medium, Default) {
							<button type="button" onclick="closeModal()">
								Annuler
							</button>
						}
						@Button(Medium, Accent) {
							<button type="submit">
								Modifier
							</button>
						}
					</div>
				</div>
			</form>
		</div>
		<script>
    if (!window.editCourseForm) {
      window.editCourseForm = true;
      document.body.addEventListener('htmx:afterOnLoad', function(evt) {
        if (evt.detail.elt.id === 'edit-course-form' && evt.detail.xhr.status === 200) {
          closeModal();
        }
      });
    }
    </script>
	}
}

templ CourseDeleteConfirm(course internal.Course) {
	@Modal() {
		<div class="flex flex-col items-center gap-y-4 mx-4 my-8">
			<h1 class="text-bf text-xl font-bold">Supprimer { fmt.Sprintf("%s %s %d", course.Code, course.Kind, course.Part) } ?</h1>
			<p>Cette action est <span class="text-red-500 font-bold">irréversible</span>.</p>
		</div>
		<div class="flex justify-center pt-4">
			<div class="flex gap-x-4">
				@Button(Medium, Default) {
					<button
						type="button"
						onclick="closeModal()"
					>
						Annuler
					</button>
				}
				@Button(Medium, Important) {
					<button
						id="delete-course-button"
						type="button"
						hx-delete={ fmt.Sprintf("/admin/courses/%s", course.ID()) }
						hx-target="#courses-grid"
					>
						Supprimer
					</button>
				}
			</div>
		</div>
		<script>
    if (!window.deleteCourseButton) {
      window.deleteCourseButton = true;
      document.body.addEventListener('htmx:afterOnLoad', function(evt) {
        if (evt.detail.elt.id === 'delete-course-button' && evt.detail.xhr.status === 200) {
          closeModal();
        }
      });
    }
    </script>
	}
}
