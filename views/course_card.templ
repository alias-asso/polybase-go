package views

import (
	"fmt"
	"git.sr.ht/~alias/polybase-go/libpolybase"
)

// CourseCard defines a reusable UI component for displaying course information
// in a card format. The card includes a header with course code and part
// information, the course name, and quantity controls for administrators. It
// handles different display states based on course visibility and admin
// privileges.
templ CourseCard(course libpolybase.Course, isAdmin bool) {
	<div id={ course.SID() } class="border border-base-300 bg-base-100 flex h-48 flex-col rounded-lg px-6 py-5 transition-colors relative gap-y-4">
		@CourseHeader(course)
		@CourseName(course)
		<div class="mt-auto flex justify-between items-baseline">
			if isAdmin {
				@CourseAdminControl(course)
			} else {
				<span></span>
			}
			@CourseQuantity(course)
		</div>
	</div>
}

// CourseHeader renders the top section of a course card containing the course
// code and part information in a horizontally aligned layout.
templ CourseHeader(course libpolybase.Course) {
	<div class="flex w-full mb-2 gap-4 min-w-0 items-center">
		@CourseCode(course)
		@CoursePart(course)
	</div>
}

// CourseCode displays the course identifier with different visual styling
// based on the course's visibility status. Shown courses use accent colors
// while hidden courses use base colors.
templ CourseCode(course libpolybase.Course) {
	if course.Shown {
		<p class="text-lg font-mono truncate text-accent-600 bg-accent-100 px-3 py-0.5 rounded-lg" title={ course.Code }>{ course.Code }</p>
	} else {
		<p class="text-lg font-mono truncate text-base-700 bg-base-200 px-3 py-0.5 rounded-lg" title={ course.Code }>{ course.Code }</p>
	}
}

// CoursePart shows the current part number and total parts of the course in a
// fraction format.
templ CoursePart(course libpolybase.Course) {
	<p class="ml-auto shrink-0 text-base-500">Partie { fmt.Sprint(course.Part) }/{ fmt.Sprint(course.Parts) }</p>
}

// CourseName presents the course title in a two-line clamped format with hover
// tooltip for longer names.
templ CourseName(course libpolybase.Course) {
	<p class="text-left leading-6 line-clamp-2" title={ course.Name }>{ course.Name }</p>
}

// CourseAdminControl provides administrative functionality including edit,
// visibility toggle, and quantity adjustment buttons. These controls are only
// rendered when isAdmin is true.
templ CourseAdminControl(course libpolybase.Course) {
	<div class="flex gap-x-1">
		@CourseEditButton(course)
		@CourseVisibilityButton(course)
		@CourseQuantityButton(course, -1)
		@CourseQuantityButton(course, 1)
	</div>
}

// EditButton creates an admin control that opens the course editing modal when
// clicked.
templ CourseEditButton(course libpolybase.Course) {
	@Button(Small, Default) {
		<button
			hx-get={ fmt.Sprintf("/admin/courses/edit/%s", course.ID()) }
			hx-target="#modal-container"
		>
			<span class="icon-pencil size-4 text-base-600"></span>
		</button>
	}
}

// QuantityButton generates increment/decrement controls for adjusting course
// quantities. Delta parameter determines button behavior: positive for
// increment, negative for decrement.
templ CourseQuantityButton(course libpolybase.Course, delta int) {
	@Button(Small, Default) {
		<button
			hx-patch={ fmt.Sprintf("/admin/courses/%s/quantity?delta=%d", course.ID(), delta) }
			hx-target={ fmt.Sprintf("#%s-quantity", course.SID()) }
		>
			if delta > 0 {
				<span class="icon-plus size-4 text-base-600"></span>
			} else {
				<span class="icon-minus size-4 text-base-600"></span>
			}
		</button>
	}
}

// VisibilityButton toggles course visibility with dynamic icon changes on
// hover.
templ CourseVisibilityButton(course libpolybase.Course) {
	@Button(Small, Default) {
		<button
			hx-patch={ fmt.Sprintf("/admin/courses/%s/visibility?visibility=%t", course.ID(), !course.Shown) }
			hx-target={ fmt.Sprintf("#%s", course.SID()) }
			hx-swap="outerHTML"
		>
			if course.Shown {
				<span class="icon-show size-4 text-base-600 group-hover:icon-hide"></span>
			} else {
				<span class="icon-hide size-4 text-base-600 group-hover:icon-show"></span>
			}
		</button>
	}
}

// CourseQuantity shows current enrollment numbers as a fraction of total
// capacity.
templ CourseQuantity(course libpolybase.Course) {
	<div class="flex items-center">
		<div class="flex items-end">
			<span id={ fmt.Sprintf("%s-quantity", course.SID()) } class="text-2xl font-bold">
				@CardQuantity(course.Quantity)
			</span>
			<span class="text-lg">/{ fmt.Sprint(course.Total) }</span>
		</div>
	</div>
}

// CardQuantity formats the current quantity value for display.
templ CardQuantity(quantity int) {
	{ fmt.Sprintf("%d", quantity) }
}
